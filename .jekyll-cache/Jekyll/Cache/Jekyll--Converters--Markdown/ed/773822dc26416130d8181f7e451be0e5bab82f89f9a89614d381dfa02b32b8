I"o<h3 id="서론">서론</h3>
<!-- 회사에서 동기들이랑 자바 스터디를 만들었다.   
나는 9장. 일반적인 프로그래밍 원칙을 맡았고 노션에 정리한 내용을 여기로 옮겼다.   -->
<p>첫번째 아이템은 <strong>아이템57. 지역변수의 범위를 최소화하라</strong></p>

<h3 id="아이템57-지역변수의-범위를-최소화하라">아이템57. 지역변수의 범위를 최소화하라</h3>
<blockquote>용어 체크</blockquote>

<h3 id="지역변수란">지역변수란?</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Ex_variables</span><span class="o">{</span>
		<span class="c1">// 전역변수(객체변수) : 같은클래스에서 호출이 가능</span>
		<span class="kt">int</span> <span class="n">global_int</span><span class="o">;</span> <span class="c1">//private이라고하지만</span>
		<span class="c1">// 전역변수(클래스변수) : 다른 클래스에서도 호출이 가능</span>
		<span class="kd">static</span> <span class="kt">int</span> <span class="n">global_statuc_int</span><span class="o">;</span> 
		<span class="c1">//Q. public or not은 설정..</span>
		<span class="kt">void</span> <span class="nf">method</span><span class="o">()</span>
		<span class="o">{</span>
			<span class="c1">//지역변수 { }안에 생성되며 { }를 벗어나면</span>
			<span class="kt">int</span> <span class="n">local_int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  
		<span class="o">}</span><span class="c1">//method() 라는 메소드가 끝나는 시점에 바로 삭제</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>선언 위치</strong>에 따라 전역변수(Global variable)와 지역변수(Local variable)로 나눠진다.</p>

<ul>
  <li>참고) 전역변수
    <ul>
      <li>객체 변수 == 인스턴스 변수
  객체 변수는 클래스 영역에서 선언되며 클래스의 객체를 생성할 때 만들어진다. 즉 객체화를 시켜서 호출해야지만 사용이 가능하다.</li>
      <li>클래스 변수 == static 변수
  객체화를 시키지 않고도 사용이 가능. 객체 변수가 객체화 시킬때마다 서로 다른 저장공간을 가지는 반면 클래스 변수는 공통적인 저장공간을 가진다.</li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nc">Card</span> <span class="o">{</span>

  <span class="nc">String</span> <span class="n">kind</span><span class="o">;</span>           

  <span class="kt">int</span> <span class="n">number</span><span class="o">;</span>

  <span class="kd">static</span> <span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">200</span><span class="o">;</span>  

  <span class="kd">static</span> <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">300</span><span class="o">;</span>    

  <span class="o">}</span>
</code></pre></div>    </div>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Ex_variables3</span> <span class="o">{</span> 

  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span> 

  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Card의 너비는 :"</span><span class="o">+</span> <span class="nc">Card</span><span class="o">.</span><span class="na">width</span><span class="o">);</span> 
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Card의 높이는 :"</span><span class="o">+</span> <span class="nc">Card</span><span class="o">.</span><span class="na">height</span><span class="o">);</span> 

  <span class="nc">Card</span> <span class="n">c1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Card</span><span class="o">();</span> 
  <span class="n">c1</span><span class="o">.</span><span class="na">kind</span> <span class="o">=</span> <span class="s">"Heart"</span><span class="o">;</span> 
  <span class="n">c1</span><span class="o">.</span><span class="na">number</span> <span class="o">=</span> <span class="mi">7</span><span class="o">;</span> 

  <span class="nc">Card</span> <span class="n">c2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Card</span><span class="o">();</span> 
  <span class="n">c2</span><span class="o">.</span><span class="na">kind</span> <span class="o">=</span> <span class="s">"Spade"</span><span class="o">;</span> 
  <span class="n">c2</span><span class="o">.</span><span class="na">number</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span> 

  <span class="n">c1</span><span class="o">.</span><span class="na">width</span> <span class="o">=</span> <span class="mi">250</span><span class="o">;</span> 
  <span class="n">c1</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="mi">350</span><span class="o">;</span> 

  <span class="o">}</span> 
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>추가) 클래스
    <ul>
      <li>클래스의 요소 : 필드와 메소드 (전에 설명함)</li>
    </ul>

    <p>인스턴스(instance)멤버란 객체(instance)를 생성한 후 사용할 수 있는 <code class="language-plaintext highlighter-rouge">filed</code>와 <code class="language-plaintext highlighter-rouge">method</code> 를 말하는데, 이들을 각각 <code class="language-plaintext highlighter-rouge">instance filed</code> , <code class="language-plaintext highlighter-rouge">instance method</code> 인스턴스 필드, 인스턴스 메소드라고 부른다.</p>

    <p>즉, 아래의 예시는 인스턴스 멤버들이다. 인스턴스 필드와 인스턴스 메소드는 객체에 소속되어있는 멤버이기 때문에 <strong>객체 없이는 사용할 수 없다.</strong></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Car</span><span class="o">{</span>
  	<span class="c1">// field </span>
  	<span class="kt">int</span> <span class="n">gas</span><span class="o">;</span>

  	<span class="c1">// method</span>
  	<span class="kt">void</span> <span class="nf">setSpeed</span><span class="o">(</span><span class="kt">int</span> <span class="n">speed</span><span class="o">){</span> <span class="o">...</span> <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>    </div>

    <p>위의 예시에서 <code class="language-plaintext highlighter-rouge">gas</code> 필드와 <code class="language-plaintext highlighter-rouge">setSpeed()</code> 메소드는 인스턴스 멤버이기 때문에 외부 클래스에서 사용하기 위해서는 car객체(instance)를 생성하고 참조 변수에서 접근해야 한다.</p>

    <p>*참고로 인스턴스 필드 gas는 객체마다 따로 존재하고 인스턴스 메소드는 객체마다 존재하지 않고 메소드 영역에 저장되고 공유됨.</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">static</code>
        <ul>
          <li>Instance에 소속된 멤버가 아니라 클래스에 소속된 멤버이기 때문에 클래스 멤버라고도 부르는 것.</li>
          <li>
            <p>Static filed and method는 클래스에 고정된 멤버이므로 클래스 로더가 클래스(바이트 코드)를 로딩해서 <strong>메소드 메모리 영역에 적재</strong>할 때 클래스별로 관리되며, 클래스의 로딩이 끝나면 바로 사용할 수 있다.</p>

            <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Calculator</span><span class="o">{</span>
  	<span class="nc">String</span> <span class="n">color</span><span class="o">;</span> <span class="c1">//계산기 별로 색깔이 다를 수 있다.</span>
  	<span class="kd">static</span> <span class="kt">double</span> <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.141592</span><span class="o">;</span> <span class="c1">// 계산기에서 사용하는 파이 값은 동일하다</span>
  <span class="o">}</span>
</code></pre></div>            </div>
          </li>
          <li>주의할 점 !
            <ul>
              <li>객체가 없어도 실행된다는 특징 때문에, 내부에 인스턴스 필드나 인스턴스 메소드를 사용할 수 없다. (Static 필드 메소드는 사용가능)
                <ul>
                  <li>사용하고 싶으면 인스턴스 생성해서 사용해야 함.</li>
                </ul>
              </li>
              <li><code class="language-plaintext highlighter-rouge">this</code> 키워드 사용 불가능 → 사용 불가능 (컴파일 에러)</li>
              <li>
                <p><code class="language-plaintext highlighter-rouge">main</code> 메소드도 <code class="language-plaintext highlighter-rouge">static</code> 이다. 그래서 객체 생성하고 인스턴스 필드와 메소드를 사용할 수 있다.</p>

                <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="nc">Class</span> <span class="nc">Car</span><span class="o">{</span>
  	<span class="kt">int</span> <span class="n">speed</span><span class="o">;</span>
  	<span class="kt">void</span> <span class="nf">run</span><span class="o">(){}</span>
  	<span class="c1">//잘못코딩</span>
  	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
  		<span class="n">speed</span> <span class="o">=</span> <span class="mi">60</span><span class="o">;</span> <span class="c1">// compile error</span>
  		<span class="n">run</span><span class="o">();</span>   <span class="c1">// compile error</span>
  	<span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>                </div>

                <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">//올바르게 수정된 코드</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
  	<span class="nc">Car</span> <span class="n">myCar</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Car</span><span class="o">();</span>
  	<span class="n">myCar</span><span class="o">.</span><span class="na">speed</span> <span class="o">=</span> <span class="mi">60</span><span class="o">;</span>
  	<span class="n">myCar</span><span class="o">.</span><span class="na">run</span><span class="o">();</span><span class="err">'</span>
  <span class="o">}</span>
</code></pre></div>                </div>
              </li>
            </ul>
          </li>
        </ul>
      </li>
      <li>클래스의 접근 제한
        <ul>
          <li>
            <p>Class 선언시 public을 생략했으면 클래스는 default 접근 제한을 가진다. Default 접근 제한을 가지면 
  <strong>같은 패키지에서 아무런 제한 없이 사용할 수 있지만 다른 패키지에서는 사용할 수 없도록 제한된다.</strong></p>

            <p>참고* 생성자를 선언하지 않으면 컴파일러에 의해 자동으로 기본 생성자가 추가되며, 기본 생성자의 접근 제한은 클래스의 접근 제한과 동일</p>
          </li>
        </ul>
      </li>
      <li>메소드의 접근제한
        <ul>
          <li>접근 제한자 public, protected, private을 생략했다면 default 접근 제한자가 적용된다.
  Default접근 제한은 class 접근 제한과 마찬가지로 같은 패키지에서는 사용할 수 있으나, 다른 패키지에서 사용할 수 없다.
  → 패키지에 클래스가 하나일 때는 private과 동일하다.(2차시 스터디에서 언급되었던 것처럼) 하지만, 한 패키지에 클래스가 두 개 이상이 되면 달라짐.</li>
        </ul>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">package</span> <span class="nn">sec13.exam03_field_method_access.package1</span><span class="o">;</span> <span class="c1">// 패키지 동일</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
  	<span class="c1">// field</span>
  	<span class="kd">public</span> <span class="kt">int</span> <span class="n">filed1</span><span class="o">;</span> <span class="c1">// public 접근 제한</span>
  	<span class="kt">int</span> <span class="n">filed2</span><span class="o">;</span> <span class="c1">// protected 접근 제한 </span>
  	<span class="kd">private</span> <span class="kt">int</span> <span class="n">filed3</span><span class="o">;</span> <span class="c1">// private 접근 제한</span>

  	<span class="c1">// 생성자</span>
  	<span class="kd">public</span> <span class="no">A</span><span class="o">{</span>
  		<span class="n">filed1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// ㅇ</span>
  		<span class="n">filed2</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// ㅇ</span>
  		<span class="n">filed3</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// ㅇ</span>
        	
  		<span class="n">method1</span><span class="o">();</span> <span class="c1">// ㅇ</span>
  		<span class="n">method2</span><span class="o">();</span> <span class="c1">// ㅇ</span>
  		<span class="n">method3</span><span class="o">();</span> <span class="c1">// ㅇ</span>
  	<span class="o">}</span>
  	<span class="c1">// method</span>
  	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">method1</span><span class="o">(){}</span>
  	<span class="kt">void</span> <span class="nf">method2</span><span class="o">()</span>
  	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">method3</span><span class="o">()</span>
</code></pre></div>        </div>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">package</span> <span class="nn">sec13.exam03_field_method_access.package1</span><span class="o">;</span> <span class="c1">// 패키지 동일</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
  	<span class="c1">// 생성자</span>
  	<span class="kd">public</span> <span class="no">B</span><span class="o">{</span>
  		<span class="n">filed1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// ㅇ</span>
  		<span class="n">filed2</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// ㅇ</span>
  		<span class="n">filed3</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// x.  -&gt; private field 접근 불가(컴파일 에러)</span>
        	
  		<span class="n">method1</span><span class="o">();</span> <span class="c1">// ㅇ</span>
  		<span class="n">method2</span><span class="o">();</span> <span class="c1">// ㅇ</span>
  		<span class="n">method3</span><span class="o">();</span> <span class="c1">// x -&gt; private 메소드 접근 불가 (컴파일 에러)</span>
  	<span class="o">}</span>
</code></pre></div>        </div>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">package</span> <span class="nn">sec13.exam03_field_method_access.package1.A_diff</span><span class="o">;</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">C</span><span class="o">{</span>
  	<span class="c1">// 생성자</span>
  	<span class="kd">public</span> <span class="no">C</span><span class="o">{</span>
  		<span class="n">filed1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// ㅇ</span>
  		<span class="n">filed2</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// x -&gt; default field 접근 불가(컴파일 에러)</span>
  		<span class="n">filed3</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// x -&gt; private field 접근 불가(컴파일 에러)</span>
        	
  		<span class="n">method1</span><span class="o">();</span> <span class="c1">// ㅇ</span>
  		<span class="n">method2</span><span class="o">();</span> <span class="c1">// x -&gt; default field 접근 불가(컴파일 에러)</span>
  		<span class="n">method3</span><span class="o">();</span> <span class="c1">// x -&gt; private 메소드 접근 불가 (컴파일 에러)</span>
  	<span class="o">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h2 id="목표">목표</h2>

<p><strong>지역 변수의 범위를 최소화</strong>하여 <strong>코드 가독성과 유지보수성을 높이고 오류 가능성을 낮추자.</strong></p>

<h3 id="1-가장-처음-쓰일-때-선언하기--사용할-때-선언하기">1. 가장 처음 쓰일 때 선언하기 (= 사용할 때 선언하기)</h3>

<p>미리 선언하면?</p>

<ul>
  <li>코드가 어수선해지며 가독성이 떨어짐</li>
  <li>변수를 실제로 사용하는 시점에 타입과 초깃값이 기억나지 않을 수 있음.</li>
  <li>지역변수의 범위 자체가 선언된 지점부터 해당 블록({}를 의미함)이 끝날 때 까지 임.
혹시나 블록 밖에 변수를 선언하면 그 블록이 끝나도 변수는 살아있고 의도하지 않은 범위에서 사용하면 큰일남. → 즉, 사용할 때 선언하지 않으면 원하지 않는 위치에서 해당 변수를 사용하게 될 수도 있고 실수를 범할 수 있음.</li>
</ul>

<p><strong>→ 미리 선언하면 여러 실수를 범할 수 있으니 가장 처음 쓰일 때 선언하자.</strong></p>

<h3 id="2-선언과-동시에-초기화하기">2. 선언과 동시에 초기화하기</h3>

<p><strong>초기화에 필요한 정보가 충분해 질 때까지 선언을 미뤄서라도 선언과 동시에 초기화하기.</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">try-catch</code>에서는 예외</p>

    <p>변수를 초기화하는 표현식에서 검사 예외를 던질 가능성이 있다면 
  try 블록 안에서 초기화 할 것 (예외가 블록을 넘어 메서드에 전파되어서)</p>

    <p>하지만, 블록 바깥에서도 사용해야하면(초기화 못해도) try 블록 바로 앞에서 선언하기</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="o">**</span><span class="kd">class</span><span class="err">&lt;?</span> <span class="nc">extends</span> <span class="nc">Set</span> <span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">cl</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;**</span>
  <span class="k">try</span><span class="o">{</span>
  	<span class="n">cl</span> <span class="o">=</span> <span class="o">~~</span>
  	<span class="c1">//생략</span>
  <span class="o">}</span> <span class="k">catch</span><span class="o">(~~){</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="3-while문보다는-for문을-쓰는-편이-낫다">3. While문보다는 for문을 쓰는 편이 낫다.</h3>

<p>(반복 변수의 값을 반복문이 종료된 뒤에도 써야하는 상황이 아니라면)</p>

<p><code class="language-plaintext highlighter-rouge">for</code> 문의 장점</p>

<ol>
  <li>
    <p>복붙 오류(실수)를 방지할 수 있다.
아래 예시에서 버그를 찾아보세요!!</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Element</span><span class="o">&gt;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
 <span class="k">while</span><span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()){</span>
 	<span class="n">doSomething</span><span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
 <span class="o">}</span>
 <span class="o">...</span>

 <span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Element</span><span class="o">&gt;</span> <span class="n">i2</span> <span class="o">=</span> <span class="n">c2</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
 <span class="k">while</span><span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()){</span>
 	<span class="n">doSomething</span><span class="o">(</span><span class="n">i2</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
 <span class="o">}</span>
 <span class="o">...</span>
</code></pre></div>    </div>

    <p>이는 컴파일도 잘 되고 예외도 던지지 않음. 
 하지만, 두번째 <code class="language-plaintext highlighter-rouge">while</code> 문은 c2를 순회하지 않고 곧장 끝남. 
 → c2 가 비어있다고 착각할 수 있음!</p>

    <p><code class="language-plaintext highlighter-rouge">for</code> 문을 사용하면 이런 오류를 컴파일타임에 잡아줄 수 있다. 
 ( i를 찾을 수 없다 는 컴파일 오류를 냄)</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">for</span><span class="o">(</span><span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Element</span> <span class="n">i</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="n">i</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();){</span>
 	<span class="nc">Element</span> <span class="n">e</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
 	<span class="o">...</span>
 <span class="o">}</span>

 <span class="c1">// 컴파일 오류 </span>
 <span class="k">for</span><span class="o">(</span><span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Element</span> <span class="n">i2</span> <span class="o">=</span> <span class="n">c2</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="n">i</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();){</span>
 	<span class="nc">Element</span> <span class="n">e2</span> <span class="o">=</span> <span class="n">i2</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
 	<span class="o">...</span>
 <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>변수 유효 범위가 <code class="language-plaintext highlighter-rouge">for</code> 문 범위와 일치하여 똑같은 이름의 변수를 여러 반복문에서도 써도 아무런 영향을 주지 않음(세련됨)</li>
  <li><code class="language-plaintext highlighter-rouge">for</code> 문은 <code class="language-plaintext highlighter-rouge">while</code> 보다 짧아서 가독성이 좋다.</li>
  <li><code class="language-plaintext highlighter-rouge">for</code>, <code class="language-plaintext highlighter-rouge">for-each</code> 등 반복 변수( ex : i)의 범위가 반복문의 몸체, 그리고 for 키워드와 몸체 사이의 괄호 안으로 제한된다.</li>
  <li>
    <p>그 외 지역변수 범위를 최소화하는 반복문 예시</p>

    <p>범위가 일치하는 두 반복 변수 <code class="language-plaintext highlighter-rouge">i</code> and <code class="language-plaintext highlighter-rouge">n</code> 를 쓸때 아래처럼 하기.
 지역 변수 범위를 최소화 하면서 반복할 때 마다 다시 계산해야 하는 비용 줄일 수 있음.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">expensiveComputation</span><span class="o">();</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
 	<span class="o">...</span><span class="c1">// i로 뭘 함</span>
 <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ol>

<ul>
  <li><code class="language-plaintext highlighter-rouge">for</code> 문 TIP
    <ul>
      <li>
        <p>컬렉션 or 배열 순회하는 권장 코드</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">for</span><span class="o">(</span><span class="nc">Element</span> <span class="n">e</span> <span class="o">:</span> <span class="n">c</span><span class="o">){</span>
  	<span class="o">...</span><span class="c1">//e do something</span>
  <span class="o">}</span>
</code></pre></div>        </div>

        <p>반복자(iterator)를 사용해야하는 상황아니면
  ( <code class="language-plaintext highlighter-rouge">for-each</code> , <code class="language-plaintext highlighter-rouge">iterator</code> 의 <code class="language-plaintext highlighter-rouge">remove</code> 메서드를 써야하면 )전통 for문 쓰기</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">for</span><span class="o">(</span><span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Element</span><span class="o">&gt;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="n">i</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();){</span>
  	<span class="nc">Element</span> <span class="n">e</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
  	<span class="o">...</span><span class="c1">//e and i does something</span>
  <span class="o">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h3 id="4-메서드를-작게-유지하고-한-가지-기능에-집중하기">4. 메서드를 작게 유지하고 한 가지 기능에 집중하기</h3>

<p>한 메서드에서 여러 가지 기능을 처리하면 한 기능이랑만 관련된 지역변수라도 다른 기능을 수행하는 코드에서 접근할 수 있다. 이는 실수를 범할 수 있다!</p>

<p>→ 메서드를 기능별로 쪼개자.</p>
:ET