---
layout:     post
title:      Java Problem Solving - Array (1)
author:     Soo-young Hwang
tags: 		JAVA
subtitle:  	Array가 사용된 문제 풀이
category:   study
published: true
---

# Array 를 활용한 문제 풀이

- Array 기초 문제를 풀면서 알게 된 함수나 개념을 기술한다.


## 1. 소수 찾기

> [설명]
> 자연수 N이 입력되면 1부터 N까지의 소수의 개수를 출력하는 프로그램을 작성하세요.
> 만약 20이 입력되면 1부터 20까지의 소수는 2, 3, 5, 7, 11, 13, 17, 19로 총 8개입니다.
>
> [입력]
> 첫 줄에 자연수의 개수 N(2<=N<=200,000)이 주어집니다.
>
> [출력]
> 첫 줄에 소수의 개수를 출력합니다.

- 소수를 구하는 방법론 중 가장 빠른 에라토스테네스의 체 활용
  - 2부터 소수를 구하고자 하는 구간의 모든 수를 나열한다. 그림에서 회색 사각형으로 두른 수들이 여기에 해당한다.
  - 2는 소수이므로 오른쪽에 2를 쓴다.
  - **자기 자신을 제외한** 2의 배수를 모두 지운다.
  - **남아있는 수 가운데** 3은 소수이므로 오른쪽에 3을 쓴다.
  - **자기 자신을 제외한** 3의 배수를 모두 지운다.
  - **남아있는 수 가운데** 5는 소수이므로 오른쪽에 5를 쓴다.
  - **자기 자신을 제외한 5**의 배수를 모두 지운다.
  - **남아있는 수 가운데** 7은 소수이므로 오른쪽에 7을 쓴다.
  - **자기 자신을 제외한** 7의 배수를 모두 지운다.
  - **위의 과정을 반복하면 구하는 구간의 모든 소수가 남는다.**
  - 출처 : https://ko.wikipedia.org/wiki/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98_%EC%B2%B4

```java
  private int solution(int n) {
    int answer = 0;

    int[] ch = new int[n + 1];
    for (int i = 2; i <= n; i++) {
      if (ch[i] == 0) { // 소수다
        answer++;
        for (int j = i; j <= n; j = j + i) ch[j] = 1; // 소수의 배수 마킹
      }
    }

    return answer;
  }
```



## 2. 숫자 뒤집기

> 해당 문제는 정수 배열을 입력받아 뒤집은 후에 소수인 값을 골라내는 문제이다.
>
> 여기서는 정수를 뒤집는 방법을 정리한다.

```java
  public boolean isPrime(int num) {
    if (num == 1) return false;
    for (int i = 2; i < num; i++) { // 2 부터 자기 숫자 전까지 약수가 존재하면 소수가 아니다
      if (num % i == 0) return false;
    }
    return true;
  }

  public List<Integer> solution(int n, int[] arr) {
    List<Integer> answer = new ArrayList<>();

    for (int i = 0; i < n; i++) {
      int tmp = arr[i]; // 뒤집으려는 숫자 
      int res = 0; // 뒤집힌 결과 값
      while (tmp > 0) {
        res = res * 10 + tmp % 10;
        tmp /= 10;
      }
      if (isPrime(res)) answer.add(res);
    }

    return answer;
  }
```

- 뒤집으려는 정수가 1230 이면 tmp = 1230 으로 시작한다
- 1230이 0, 3, 32, 321 순으로 뒤집어진다
- 원래 숫자(뒤집기 전) 숫자에서
  일의 자리값이 열배가 세 번 반복되어 천의 자리가 되고
  십의 자리 값이 나머지 연산으로 일의자리에 세팅이 된 후 (tmp%10) 열배가 두 번 반복되어 백의 자리가 되는 방식으로 뒤집는다.
  - 0 = 0 * 10 + 0
  - 3 = 0 * 10 + 3
  - 32 = 3 * 10 + 2
  - 321 = 32 * 10 + 1

